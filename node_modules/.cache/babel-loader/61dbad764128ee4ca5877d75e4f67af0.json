{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gilad\\\\Desktop\\\\humanz-project\\\\src\\\\context\\\\ContactsCrudContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport api from \"../api/contacts\";\nimport { uuid } from \"uuidv4\";\nimport { createContext, useContext } from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contactsCrudContext = /*#__PURE__*/createContext();\nexport function ContactsCrudContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [contacts, setContacts] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]); //RetrieveContacts\n\n  const retrieveContacts = async () => {\n    const response = await api.get(\"/contacts\");\n    if (response.data) setContacts(response.data);\n  }; //AddContacts\n\n\n  const addContactHandler = async contact => {\n    console.log(contact);\n    const request = {\n      id: uuid(),\n      ...contact\n    };\n    const response = await api.post(\"/contacts\", request);\n    console.log(response);\n    setContacts([...contacts, response.data]);\n  }; //DeleteContacts\n\n\n  const removeContactHandler = async id => {\n    await api.delete(`/contacts/${id}`);\n    const newContactList = contacts.filter(contact => {\n      return contact.id !== id;\n    });\n    setContacts(newContactList);\n  }; //SearcgFunctionlity\n\n\n  const searchHandler = searchTerm => {\n    setSearchTerm(searchTerm);\n\n    if (searchTerm !== \"\") {\n      const newContactList = contacts.filter(contact => {\n        return Object.values(contact).join(\" \").toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setSearchResults(newContactList);\n    } else {\n      setSearchResults(contacts);\n    }\n  };\n\n  const value = {\n    contacts,\n    searchTerm,\n    searchResults,\n    retrieveContacts,\n    removeContactHandler,\n    addContactHandler,\n    searchHandler\n  };\n  return /*#__PURE__*/_jsxDEV(contactsCrudContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContactsCrudContextProvider, \"R3u1RNaEN7u2C6lAgah7fXDpjcU=\");\n\n_c = ContactsCrudContextProvider;\nexport function useContactsCrud() {\n  _s2();\n\n  return useContext(contactsCrudContext);\n}\n\n_s2(useContactsCrud, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactsCrudContextProvider\");","map":{"version":3,"sources":["C:/Users/gilad/Desktop/humanz-project/src/context/ContactsCrudContext.js"],"names":["api","uuid","createContext","useContext","useState","contactsCrudContext","ContactsCrudContextProvider","children","contacts","setContacts","searchTerm","setSearchTerm","searchResults","setSearchResults","retrieveContacts","response","get","data","addContactHandler","contact","console","log","request","id","post","removeContactHandler","delete","newContactList","filter","searchHandler","Object","values","join","toLowerCase","includes","value","useContactsCrud"],"mappings":"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","sourcesContent":["import api from \"../api/contacts\";\r\nimport { uuid } from \"uuidv4\";\r\nimport { createContext, useContext } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst contactsCrudContext = createContext();\r\n\r\nexport function ContactsCrudContextProvider({ children }) {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  //RetrieveContacts\r\n  const retrieveContacts = async () => {\r\n    const response = await api.get(\"/contacts\");\r\n    if (response.data) setContacts(response.data);\r\n  };\r\n  //AddContacts\r\n  const addContactHandler = async (contact) => {\r\n    console.log(contact);\r\n    const request = {\r\n      id: uuid(),\r\n      ...contact,\r\n    };\r\n\r\n    const response = await api.post(\"/contacts\", request);\r\n    console.log(response);\r\n    setContacts([...contacts, response.data]);\r\n  };\r\n\r\n  //DeleteContacts\r\n  const removeContactHandler = async (id) => {\r\n    await api.delete(`/contacts/${id}`);\r\n    const newContactList = contacts.filter((contact) => {\r\n      return contact.id !== id;\r\n    });\r\n\r\n    setContacts(newContactList);\r\n  };\r\n  //SearcgFunctionlity\r\n  const searchHandler = (searchTerm) => {\r\n    setSearchTerm(searchTerm);\r\n    if (searchTerm !== \"\") {\r\n      const newContactList = contacts.filter((contact) => {\r\n        return Object.values(contact)\r\n          .join(\" \")\r\n          .toLowerCase()\r\n          .includes(searchTerm.toLowerCase());\r\n      });\r\n      setSearchResults(newContactList);\r\n    } else {\r\n      setSearchResults(contacts);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    contacts,\r\n    searchTerm,\r\n    searchResults,\r\n    retrieveContacts,\r\n    removeContactHandler,\r\n    addContactHandler,\r\n    searchHandler,\r\n  };\r\n\r\n  return (\r\n    <contactsCrudContext.Provider value={value}>\r\n      {children}\r\n    </contactsCrudContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useContactsCrud() {\r\n  return useContext(contactsCrudContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}